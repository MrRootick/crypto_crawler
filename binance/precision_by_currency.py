from currency_utils import get_currency_pair_to_binance

# BASE_CURRENCY = BTC
PRECISIONS = {
    "ETHBTC":  0.001,
    "LTCBTC":  0.01,
    "BNBBTC":  1,
    "NEOBTC":  0.01,
    "GASBTC":  0.01,
    "BCCBTC":  0.001,
    "MCOBTC":  0.01,
    "WTCBTC":  1,
    "QTUMBTC": 0.01,
    "OMGBTC":  0.01,
    "ZRXBTC":  1,
    "STRATBTC":0.01,
    "SNGLSBTC":1,
    "BQXBTC":  1,
    "KNCBTC":  1,
    "FUNBTC":  1,
    "SNMBTC":  1,
    "LINKBTC": 1,
    "XVGBTC":  1,
    "CTRBTC":  1,
    "SALTBTC": 0.01,
    "IOTABTC": 1,
    "MDABTC":  1,
    "MTLBTC":   1,
    "SUBBTC":   1,
    "EOSBTC":   1,
    "SNTBTC":   1,
    "ETCBTC":   0.01,
    "MTHBTC":   1,
    "ENGBTC":   1,
    "DNTBTC":   1,
    "BNTBTC":   1,
    "ASTBTC":   1,
    "DASHBTC":  0.001,
    "ICNBTC":   1,
    "OAXBTC":   1,
    "BTGBTC":   0.01,
    "EVXBTC":   1,
    "REQBTC":   1,
    "LRCBTC":   1,
    "VIBBTC":   1,
    "HSRBTC":   1,
    "TRXBTC":   1,
    "POWRBTC":  1,
    "ARKBTC":   0.01,
    "YOYOBTC":  1,
    "XRPBTC":   1,
    "MODBTC":   1,
    "ENJBTC":   1,
    "STORJBTC": 1,
    "VENBTC":   1,
    "KMDBTC":   1,
    "RCNBTC":   1,
    "NULSBTC":  1,
    "RDNBTC":   1,
    "XMRBTC":   0.001,
    "DLTBTC":   0.001,
    "AMBBTC":   0.001,
    "BATBTC":   1,
    "ZECBTC":   0.001,
    "BCPTBTC":  1,
    "ARNBTC":   1,
    "GVTBTC":   0.01,
    "CDTBTC":   1,
    "GXSBTC":   0.01,
    "POEBTC":   1,
    "QSPBTC":   1,
    "BTSBTC":   1,
    "XZCBTC":   0.01,
    "LSKBTC":   0.01,
    "TNTBTC":   1,
    "FUELBTC":  1,
    "MANABTC":  1,
    "BCDBTC":   0.001,
    "DGDBTC":   0.001,
    "ADXBTC":   1,
    "ADABTC":   1,
    "PPTBTC":   0.01,
    "CMTBTC":   1,
    "XLMBTC":   1,
    "CNDBTC":   1,
    "LENDBTC":  1,
    "WABIBTC":  1,
    "TNBBTC":   1,
    "WAVESBTC": 0.01,
    "ICXBTC":   0.01,
    "GTOBTC":   1,
    "OSTBTC":   1,
    "ELFBTC":   1,
    "AIONBTC":  1,
    "NEBLBTC":  1
}


def round_minimum_volume_by_binance_rules(volume, pair_id):
    pair_name = get_currency_pair_to_binance(pair_id)
    print "WTF", pair_name, pair_id
    return (int(volume / PRECISIONS[pair_name])) * PRECISIONS[pair_name]